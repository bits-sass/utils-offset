/* ==========================================================================
   Offset utilities
   ========================================================================== */


/**
 * Variables
 *
 * It is recommended to override these.
 *
 * 1. Utility namespace.
 */

$bits-utils-ns: 'bits-' !default; /* 1 */

/**
 * Offset
 *
 * 1. List of column variations.
 */

$bits-offset-columns: (2 3 4 5 6 8 10 12) !default; /* 1 */

/* -------------------------------------------------------------------------- */

/**
 * Proportional offset before
 *
 * Specifies the proportional offset before an object.
 * Intentional redundancy build into each set of unit classes.
 *
 * --------------
 * Example usage:
 * --------------
 *
 * <div class="Module u-size2of4 u-before1of4">
 *   ...
 * </div>
 */

/**
 * Proportional offset after
 *
 * Specify the proportional offset after an object.
 * Intentional redundancy build into each set of unit classes.
 *
 * --------------
 * Example usage:
 * --------------
 *
 * <div class="Module u-size1of4 u-after2of4">
 *   ...
 * </div>
 * <div class="Module u-size1of4">
 *   ...
 * </div>
 */



/* Utilities generator
   ========================================================================== */

/**
 * Collect unique values
 */

$bits-offset-values-unique: ();

@each $columns in $bits-offset-columns {
  @for $position from 1 through $columns - 1 {
    $value: percentage(1 / ($columns / $position));

    @if not index($bits-offset-values-unique, $value) {
      $bits-offset-values-unique: append(
        $bits-offset-values-unique,
        $value
      )
    }
  }
}

/**
 * Generate 'before' utils
 */

@each $value in $bits-offset-values-unique {
  $selectors: ();

  @each $columns in $bits-offset-columns {
    @for $position from 1 through $columns - 1 {
      $innerValue: percentage(1 / ($columns / $position));

      @if $innerValue == $value {
        $selectors: $selectors, unquote(".#{$bits-utils-ns}u-before#{$position}of#{$columns}");
      }
    }
  }

  @if length($selectors) > 0 {
    #{$selectors} {
      margin-left: $value !important;
    }
  }
}

/**
 * Generate 'after' utils
 */

@each $value in $bits-offset-values-unique {
  $selectors: ();

  @each $columns in $bits-offset-columns {
    @for $position from 1 through $columns - 1 {
      $innerValue: percentage(1 / ($columns / $position));

      @if $innerValue == $value {
        $selectors: $selectors, unquote(".#{$bits-utils-ns}u-after#{$position}of#{$columns}");
      }
    }
  }

  @if length($selectors) > 0 {
    #{$selectors} {
      margin-right: $value !important;
    }
  }
}